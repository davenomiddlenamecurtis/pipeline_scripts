# template for a script to be part of pipeline

# each line will go through a process like this so that variables get substituted:
# newline=`echo echo $line | bash`
# this mean that stuff like quotes, double quotes and escaped characters may not be dealt with correctly

# TEMPFOLDER is the place for intermediate files belonging to the script in main project space
# except for SCRATCHFOLDER all folders will be relative to PIPELINEHOMEFOLDER
TEMPFOLDER compressfastqtemp

# INPUTFOLDER is folder where to find input files, relative to $PIPELINEHOMEFOLDER
INPUTFOLDER fastq/data

# INPUTFILES is spec of input files in $PIPELINEHOMEFOLDER/$INPUTFOLDER (can have wildcards, usually will have $ID in it)
# include here any files which should have been created by this stage, even if not needed by script
INPUTFILES ${ID}_sorted_unique.cleaned.r1.fastq

# OUTPUTFOLDER is folder where to find output files, relative to $PIPELINEHOMEFOLDER
OUTPUTFOLDER fastq/data

# OUTPUTFILES is list of output files in $PIPELINEHOMEFOLDER/$OUTPUTFOLDER (usually will have $ID in it)
# only include output file which will be created because otherwise others will be deleted if problems
OUTPUTFILES ${ID}_sorted_unique.cleaned.r1.fastq.gz.waitingforr2

# HVMEM will be read and used to request hvmem for the script
HVMEM 1G
TMEM 1G
NCORES 1
SCRATCH 1G
NHOURS 10


# COMMANDS must be at end of script and give set of commands to get from input to output files
# must be constructed so that complete output files are produced promptly, usually with a mv commands
# must NOT contain exit commands
# most scripts would do some final checks before definitively writing output files
# the pipeline script will do the following checks:
# if all output files exist and are not zero, skip the script
# if not, delete any output files
# if any input files do not exist then report error and exit
# if not all output files are created properly, report error

COMMANDS

cd $PIPELINEHOMEFOLDER/$INPUTFOLDER
for f in $INPUTFILES
# though in fact there is only one 
do
if [ $( gzip -c $f > $PIPELINEHOMEFOLDER/$TEMPFOLDER/$f.gz ) ]
then
	if [ $( gzip -t $PIPELINEHOMEFOLDER/$TEMPFOLDER/$f.gz ) ]
	then
		mv $PIPELINEHOMEFOLDER/$TEMPFOLDER/$f.gz $PIPELINEHOMEFOLDER/$OUTPUTFOLDER/$f.gz.waitingforr2
		rm $f
	fi
fi
done
	


